"use client";

import { useState, useEffect, useRef } from 'react';
import { getBlogPosts, getTestimonials } from '@/lib/api';
import type { BlogPost, Testimonial } from '@/types';
import BlogCard from '@/components/BlogCard';
import TestimonialCard from '@/components/TestimonialCard';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import BlogPostModal from '@/components/BlogPostModal'; // Import the new modal

export default function CommunityPage() {
  const [posts, setPosts] = useState<BlogPost[]>([]);
  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  
  // State for the carousel arrows
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [canScrollRight, setCanScrollRight] = useState(true);

  // --- NEW: State to manage the modal ---
  const [activePostIndex, setActivePostIndex] = useState<number | null>(null);

  useEffect(() => {
    async function fetchData() {
      const [blogData, testimonialData] = await Promise.all([
        getBlogPosts(),
        getTestimonials()
      ]);
      setPosts(blogData);
      setTestimonials(testimonialData);
    }
    fetchData();
  }, []);

  // --- NEW: Functions to control the modal ---
  const openModal = (index: number) => {
    setActivePostIndex(index);
    document.body.style.overflow = 'hidden'; // Prevent background scroll
  };

  const closeModal = () => {
    setActivePostIndex(null);
    document.body.style.overflow = ''; // Re-enable background scroll
  };

  const navigateModal = (newIndex: number) => {
    if (newIndex >= 0 && newIndex < posts.length) {
      setActivePostIndex(newIndex);
    }
  };

  // Your existing carousel logic remains unchanged
  const checkScrollability = () => {
    const el = scrollContainerRef.current;
    if (el) {
      setCanScrollLeft(el.scrollLeft > 0);
      setCanScrollRight(el.scrollLeft < el.scrollWidth - el.clientWidth - 1);
    }
  };

  useEffect(() => {
    const el = scrollContainerRef.current;
    if (el) {
      checkScrollability();
      el.addEventListener('scroll', checkScrollability);
    }
    return () => {
      if (el) {
        el.removeEventListener('scroll', checkScrollability);
      }
    };
  }, [posts]);

  const handleScroll = (direction: 'left' | 'right') => {
    const el = scrollContainerRef.current;
    if (el) {
      const scrollAmount = direction === 'left' ? -el.clientWidth * 0.8 : el.clientWidth * 0.8;
      el.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };

  return (
    <div className="bg-gradient-to-br from-gray-50 to-teal-50 min-h-screen">
      {/* Hero Section (No changes) */}
      <section className="relative bg-gradient-to-br from-teal-800 via-teal-600 to-amber-500 text-white py-24 text-center overflow-hidden">
        {/* ... your hero section content ... */}
      </section>

      {/* Blog Posts Section */}
      <section className="py-20">
        <div className="container mx-auto px-6">
          <div className="flex justify-between items-center mb-12 animate-fade-in-up">
            <div className="text-center lg:text-left">
                <h2 className="text-4xl font-bold text-gray-800 mb-6">From Our Blog</h2>
                <p className="text-lg text-gray-600 max-w-3xl leading-relaxed">
                    Discover travel insights, destination guides, and personal stories from our community of adventurers.
                </p>
            </div>
            {/* Carousel Arrows (No changes) */}
            <div className="hidden lg:flex space-x-4">
              <button onClick={() => handleScroll("left")} disabled={!canScrollLeft} className="p-3 rounded-full bg-white shadow-md hover:bg-gray-100 disabled:opacity-50 transition-all">
                  <ChevronLeft className="w-6 h-6 text-gray-800" />
              </button>
              <button onClick={() => handleScroll("right")} disabled={!canScrollRight} className="p-3 rounded-full bg-white shadow-md hover:bg-gray-100 disabled:opacity-50 transition-all">
                  <ChevronRight className="w-6 h-6 text-gray-800" />
              </button>
            </div>
          </div>

          {posts.length > 0 ? (
            <div
              ref={scrollContainerRef}
              className="flex overflow-x-auto space-x-8 pb-8 -mx-6 px-6 scrollbar-hide"
            >
              {posts.map((post: BlogPost, index) => (
                // --- UPDATED: Added onClick handler here ---
                <div
                  key={post.id}
                  className="animate-fade-in-up hover-lift cursor-pointer"
                  style={{ animationDelay: `${index * 0.1}s` }}
                  onClick={() => openModal(index)} // This opens the modal
                >
                  <BlogCard post={post} />
                </div>
              ))}
            </div>
          ) : (
             // Your "Coming Soon" placeholder (No changes)
            <div className="text-center py-20 animate-fade-in-up">
              {/* ... placeholder content ... */}
            </div>
          )}
        </div>
      </section>

      {/* Testimonials Section (No changes) */}
      {testimonials.length > 0 && (
        <section className="relative bg-gradient-to-br from-teal-50 to-amber-50 py-24 overflow-hidden">
           {/* ... your testimonials content ... */}
        </section>
      )}

      {/* --- NEW: Conditionally render the Modal --- */}
      {activePostIndex !== null && (
        <BlogPostModal
          posts={posts}
          initialPostIndex={activePostIndex}
          onClose={closeModal}
          onNavigate={navigateModal}
        />
      )}
    </div>
  );
}

